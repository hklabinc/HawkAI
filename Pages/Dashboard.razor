@page "/dashboard"
@attribute [Authorize(Roles ="Admin,Normal")]
@inject ICameraService _cameraRepository
@using Microsoft.AspNetCore.Identity
@using MQTTnet;
@using MQTTnet.Client;
@using System.Text;
@using Newtonsoft.Json.Linq;
@using System.Net;
@using System.Text.Json;

<style>
    * {
      box-sizing: border-box;
    }

    body {
      font-family: Arial, Helvetica, sans-serif;
    }
</style>

<div class="form-group" style="display:none;">
    <button class="btn btn-success" @onclick="Subscribe">Connect</button>
    <button class="btn btn-danger" @onclick="Disconnect">Disconnect</button>
    <label>
        Server:        
        <input @bind="servAddr" size="15" placeholder="hawkai.hknu.ac.kr"/>
    </label>    
    <label>
        Port:
        <input @bind="servPort" size="3" placeholder="8085"/>
    </label>
    <label>
        SubTopic:
        <input @bind="topicSubUser" size="10"/>
    </label>
    <label>
        PubTopic:
        <input @bind="topicPubUser" size="10"/>
    </label>
</div>

<ul id="messagesList0" style="width: 300px; height: 70px; overflow: auto">
    @foreach (var message in messages0)
    {
        <li style="font-size:3px">@message</li>
    }
</ul>

<hr />
<div class="form-group">
    <button class="btn btn-success" @onclick="ImageOn">Image On</button>
    <button class="btn btn-danger" @onclick="ImageOff">Image Off</button>
    <button class="btn btn-success" @onclick="EventOn">Event On</button>
    <button class="btn btn-danger" @onclick="EventOff">Event Off</button>
    <label>
        Control Parameter:
        <input @bind="messageInput" size="20" placeholder="interval=1 or scale=0.5"/>
    </label>
    <button class="btn btn-warning" @onclick="Send">Send</button>
</div>


<br />

<hr />
<div class="col-12">
    @if (Cameras.Any())
    {
        <div class="container px-4 py-1" id="custom-cards">
            <div class="row row-cols-1 row-cols-lg-2 align-items-stretch g-4">

                @foreach (var objMsg in rxMqttMsgArray)
                {
                    @if (objMsg.image?.Length > 0)
                    {
                        <div class="col">
                            <div class="card card-cover h-100 overflow-hidden text-bg-light rounded-3 shadow-lg">
                                <div class="d-flex flex-column h-100 p-4 pb-3 text-black text-shadow-1">
                                    @*<h3 class="pt-5 mt-5 mb-4 display-6 lh-1 fw-bold">@objMsg.addr</h3>*@
                                    <h6><b>@objMsg.addr</b></h6> 
                                    <h6>@objMsg.time (@objMsg.image?.Length B)</h6> 
                                    <img src="data:image/jpeg;base64,@objMsg.image" />
                                    @if (objMsg.type == "event")
                                    {
                                        <font color="red"><b>@objMsg.label</b></font>
                                    }
                                    else
                                    {
                                        <h6>@objMsg.label</h6>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    }
    else
    {
    if (IsLoading)
        {
            <div class="text-center">
                <img src="/img/loading.gif">
            </div>
        }
        else
        {
            <p>No records found.</p>
        }
    }
</div>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject]
    UserManager<IdentityUser> userManager { get; set; }

    private IEnumerable<Camera> Cameras { get; set; } = new List<Camera>();
    public bool IsLoading { get; set; }

    private int numOfCameras = 0;
    private List<MqttMsg> rxMqttMsgList = new List<MqttMsg>();
    private List<string> camIdList = new List<string>();
    private MqttMsg[] rxMqttMsgArray;    

    // Create a new MQTT client.
    private static MqttFactory factory = new MqttFactory();
    private static IMqttClient mqttClient = factory.CreateMqttClient();

    private List<string> messages0 = new List<string>();
    private List<string> messages1 = new List<string>();        

    private string servAddr = "hawkai.hknu.ac.kr";
    private int servPort = 8085;
    private string TOPIC_SUB = "hawkai/from";
    private string TOPIC_PUB = "hawkai/to";
    private string topicSubAll = string.Empty;    
    private string topicPubAll = string.Empty;
    private string topicSubUser = string.Empty;    
    private string topicPubUser = string.Empty;
    private string messageInput = string.Empty;

    string userId = string.Empty;   
    string userEmail = string.Empty;

    protected override async void OnInitialized()
    {        
        var user = (await authenticationStateTask).User;
        var currentUser = await userManager.GetUserAsync(user);
        userId = currentUser.Id;
        userEmail = currentUser.Email;

        topicSubAll = TOPIC_SUB + "/" + "ffffffff";
        topicPubAll = TOPIC_PUB + "/" + "ffffffff";
        topicSubUser = TOPIC_SUB + "/" + userId;
        topicPubUser = TOPIC_PUB + "/" + userId;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)      // DB 내용이 많은 경우에는 이렇게 처리하는 것이 좋음
    {
        if (firstRender)
        {
            await Disconnect();
            await Subscribe();
            await LoadCameras();            
        }        
    }

    private async Task LoadCameras()
    {
        IsLoading = true;
        StateHasChanged(); 
        Cameras = await _cameraRepository.GetMyCameras(userEmail);

        Console.WriteLine("[hhchoi] number of cameras=" + Enumerable.Count<Camera>(Cameras));
        numOfCameras = Enumerable.Count<Camera>(Cameras);
        foreach(var objMsg in Cameras)
        {
            rxMqttMsgList.Add(new MqttMsg());
            camIdList.Add(objMsg.Name.ToString());                        
        }
        Console.WriteLine("[hhchoi] " + string.Join(",", camIdList));
        //Console.WriteLine("[hhchoi] rxMqttMsgList.Count" + rxMqttMsgList.Count);         
        rxMqttMsgArray = rxMqttMsgList.ToArray();      // list를 array로
                                                       //Console.WriteLine("[hhchoi] rxMqttMsgArray.Length" + rxMqttMsgArray.Length);         

        IsLoading = false;
        StateHasChanged();      //OnAfterRenderAsync 사용할 때 StateHasChanged 있어야
    }

    // 페이지 나갈때 MQTT close 해줘야!!
    private async Task Disconnect()
    {
        if (mqttClient is not null)
        {
            await mqttClient.DisconnectAsync();
            messages0.Add("MQTT Diconnection");
        }
    }

    private async Task Subscribe()
    {
        if (mqttClient is not null)
        {
            var clientId = Guid.NewGuid().ToString();       // 전역 고유 식별자
            messages0.Add($"clientId: {clientId}");

            // Use WebSocket connection.
            var options = new MqttClientOptionsBuilder()
                .WithClientId(clientId)     
                .WithTcpServer(servAddr, servPort)
                .WithCleanSession()
                .Build();

            await mqttClient.ConnectAsync(options, CancellationToken.None); // Since 3.0.5 with CancellationToken      

            // Subscribe to a topic 1
            await mqttClient.SubscribeAsync(new MqttTopicFilterBuilder().WithTopic(topicSubUser).Build());
            messages0.Add("MQTT Subscribed with topicSubUser");

            // Subscribe to a topic 2
            await mqttClient.SubscribeAsync(new MqttTopicFilterBuilder().WithTopic(topicSubAll).Build());
            messages0.Add("MQTT Subscribed with topicSubAll");


            mqttClient.DisconnectedAsync += async e =>
            {
                Console.WriteLine("MQTT Disconnected");
                await Task.CompletedTask;
            };

            // 메시지 수신시 실행 
            mqttClient.ApplicationMessageReceivedAsync += async e =>
            {
                // JSON 메시지 분석
                var jsonUtf8Bytes = e.ApplicationMessage.Payload;
                Console.WriteLine("[hhchoi] RxMqttMsg: " + e.ApplicationMessage.ConvertPayloadToString().Substring(0,110));

                if (jsonUtf8Bytes is not null)
                {                    
                    MqttMsg? mqttmsg = JsonSerializer.Deserialize<MqttMsg>(jsonUtf8Bytes);
                    if (mqttmsg is not null)
                    {
                        string? addr = mqttmsg.addr;
                        string? type = mqttmsg.type;
                        string? time = mqttmsg.time;
                        string? label = mqttmsg.label;
                        string? image = mqttmsg.image;

                        int camIdx = camIdList.IndexOf(addr);
                        //int camIdx = camIdList.IndexOf(addr?? "n/a");
                        //if (addr == "asdf")
                        //    camIdx = 7;

                        Console.WriteLine("[hhchoi] RxCam: " + addr + ", Index: " + camIdx);  

                        if (camIdx >= 0)
                        {
                            rxMqttMsgArray[camIdx].addr = addr;
                            rxMqttMsgArray[camIdx].type = type;
                            rxMqttMsgArray[camIdx].time = time;
                            rxMqttMsgArray[camIdx].label = label;
                            rxMqttMsgArray[camIdx].image = image;

                            //if (type == "event")
                            //{
                            //    messages1.Add($"Event : {label1} {time1}");
                            //}                                  
                        }
                    }
                }
                //await Task.CompletedTask;
                await InvokeAsync(StateHasChanged);
            };
        }
        else
        {
            messages0.Add("mqttClient is null !!!");
        }
    }

    private MqttApplicationMessage makeMqttMessage(string topic, string message)
    {
        var mqttMsg = new MqttApplicationMessageBuilder()
                .WithTopic(topic)
                .WithPayload(message)
                .WithQualityOfServiceLevel(MQTTnet.Protocol.MqttQualityOfServiceLevel.ExactlyOnce)
                .WithRetainFlag()
                .Build();
        return mqttMsg;
    }

    private async Task Send()
    {
        if (mqttClient is not null)
        {            
            await mqttClient.PublishAsync(makeMqttMessage(topicPubUser, messageInput), CancellationToken.None); // Since 3.0.5 with CancellationToken
            await mqttClient.PublishAsync(makeMqttMessage(topicPubAll, messageInput), CancellationToken.None);
            messages0.Add("Set control parameter with " + messageInput);
        }
    }

    private async Task ImageOn()
    {
        if (mqttClient is not null)
        {
            string msgControl = "isImage=True";
            await mqttClient.PublishAsync(makeMqttMessage(topicPubUser, msgControl), CancellationToken.None); 
            await mqttClient.PublishAsync(makeMqttMessage(topicPubAll, msgControl), CancellationToken.None);
            messages0.Add("Set isImage=True");
        }
    }

    private async Task ImageOff()
    {
        if (mqttClient is not null)
        {
            string msgControl = "isImage=False";
            await mqttClient.PublishAsync(makeMqttMessage(topicPubUser, msgControl), CancellationToken.None); 
            await mqttClient.PublishAsync(makeMqttMessage(topicPubAll, msgControl), CancellationToken.None);
            messages0.Add("Set isImage=False");
        }
    }

    private async Task EventOn()
    {
        if (mqttClient is not null)
        {
            string msgControl = "isEvent=True";
            await mqttClient.PublishAsync(makeMqttMessage(topicPubUser, msgControl), CancellationToken.None); 
            await mqttClient.PublishAsync(makeMqttMessage(topicPubAll, msgControl), CancellationToken.None);
            messages0.Add("Set isEvent=True");
        }
    }

    private async Task EventOff()
    {
        if (mqttClient is not null)
        {
            string msgControl = "isEvent=False";
            await mqttClient.PublishAsync(makeMqttMessage(topicPubUser, msgControl), CancellationToken.None);
            await mqttClient.PublishAsync(makeMqttMessage(topicPubAll, msgControl), CancellationToken.None);
            messages0.Add("Set isEvent=False");
        }
    }
}