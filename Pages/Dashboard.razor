@page "/dashboard"
@attribute [Authorize(Roles ="Admin,Normal")]
@inject ICameraService CameraService
@using Microsoft.AspNetCore.Identity
@using MQTTnet;
@using MQTTnet.Client;
@using System.Text;
@using Newtonsoft.Json.Linq;
@using System.Net;
@using System.Text.Json;

<style>
    * {
      box-sizing: border-box;
    }

    body {
      font-family: Arial, Helvetica, sans-serif;
    }
</style>



<div class="form-group">
    <label style="font-weight: bold;">My Cameras:&nbsp</label>
    @foreach (var camera in CameraService.Cameras)
    {
        <span>@camera.Name, </span>
    }    
</div>

@*<div class="form-group" style="display:none;">
    <button class="btn btn-success" @onclick="Subscribe">Connect</button>
    <button class="btn btn-danger" @onclick="Disconnect">Disconnect</button>
    <label>
        Server:        
        <input @bind="servAddr" size="15" placeholder="hawkai.hknu.ac.kr"/>
    </label>    
    <label>
        Port:
        <input @bind="servPort" size="3" placeholder="8085"/>
    </label>
    <label>
        SubTopic:
        <input @bind="topicSubUser" size="10"/>
    </label>
    <label>
        PubTopic:
        <input @bind="topicPubUser" size="10"/>
    </label>
</div>*@

<div class="container border p-1" style="float: left;">
    <ul id="messagesList0" style="width: 500px; height: 70px; overflow: auto">
        @foreach (var message in messages0)
        {
            <li style="font-size:3px">@message</li>
        }
    </ul>
</div>


<div class="container border p-1" style="float: left;">
    <div class="row p-1">
        <div class="col-md-auto">
            <label>Image:</label> <label class="switch"> <input type="checkbox" @onclick="ControlImage" @bind-value="@IsImage" checked="@(IsImage ? "checked" : null)" /> <span class="slider round"></span></label> <span id="valImage">@(IsImage ? "On" : "Off")</span>
        </div>
        <div class="col-md-auto">
            <label>Event:</label> <label class="switch"> <input type="checkbox" @onclick="ControlEvent" @bind-value="@IsEvent" checked="@(IsEvent ? "checked" : null)" /> <span class="slider round"></span></label> <span id="valEvent">@(IsEvent ? "On" : "Off")</span>
        </div>
        <div class="col-md-auto">
            <label>Query:</label> <label class="switch"> <input type="checkbox" @onclick="ControlQuery" @bind-value="@IsQuery" checked="@(IsQuery ? "checked" : null)" /> <span class="slider round"></span></label> <span id="valQuery">@(IsQuery ? "On" : "Off")</span>
        </div>
        <div class="col-md-auto">
            <label for="select-scale">Scale:</label>
            <select @bind="SelectScale">
                @foreach (var prop in ScaleProp)
                {
                    <option value="@prop.Value">@prop.Key </option>
                }
            </select>
        </div>
        <div class="col-md-auto">
            <label for="select-interval">Interval:</label>
            <select @bind="SelectInterval">
                @foreach (var prop in IntervalProp)
                {
                    <option value="@prop.Value">@prop.Key </option>
                }
            </select>
        </div>
        <div class="col-md-auto">
            <label for="select-threshold">Threshold:</label>
            <select @bind="SelectThreshold">
                @foreach (var prop in ThresholdProp)
                {
                    <option value="@prop.Value">@prop.Key </option>
                }
            </select>
        </div>
        <div class="col-md-auto">
            <button class="btn btn-warning" @onclick="SendDefaultParameter">Set Default</button>        
            <button class="btn btn-danger" id="send_video" @onclick="SendPing">Ping</button>
        </div>
    </div>
</div>



@*<div class="form-group">
    <button class="btn btn-success" @onclick="ImageOn">Image On</button>
    <button class="btn btn-danger" @onclick="ImageOff">Image Off</button>
    <button class="btn btn-success" @onclick="EventOn">Event On</button>
    <button class="btn btn-danger" @onclick="EventOff">Event Off</button>
    <label>
        Control Parameter:
        <input @bind="messageInput" size="20" placeholder="interval=1 or scale=0.5"/>
    </label>
    <button class="btn btn-warning" @onclick="Send">Send</button>
</div>
<hr />*@


    
@if (Cameras.Any() && !IsLoading)
{
    <div class="container p-1" style="float: left;">
        <div class="container px-0 py-2" id="custom-cards">
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 align-items-stretch g-3">

                @foreach (var objMsg in rxMqttMsgArray)
                {
                    @if (objMsg.image?.Length > 0)
                    {
                        <div class="col">
                            <div class="card card-cover h-100 overflow-hidden text-bg-light rounded-3 shadow-lg" style="width: 100%;">
                                <div class="card-header d-flex align-items-center">
                                    <h6 class="m-0"><b>@objMsg.addr</b></h6>
                                </div>
                                <div class="d-flex flex-column h-100 p-2 text-black text-shadow-1">
                                    <span>@objMsg.time (@(objMsg.image?.Length/1000) KB)</span>
                                    <img src="data:image/jpeg;base64,@objMsg.image" />
                                    @if (objMsg.type == "event")
                                    {
                                        <font color="red"><b>@objMsg.label</b></font>
                                    }
                                    else
                                    {
                                        string rxLabel = objMsg.label;
                                        if (objMsg.type == "pong" || (rxLabel.StartsWith('{') && rxLabel.EndsWith('}')))
                                        {                                                
                                            ControlMsg? ctrlmsg = JsonSerializer.Deserialize<ControlMsg>(rxLabel);
                                            if (ctrlmsg is not null)
                                            {
                                                bool _isImage = ctrlmsg.isImage;
                                                bool _isEvent = ctrlmsg.isEvent;
                                                bool _isQuery = ctrlmsg.isQuery;
                                                float _scale = ctrlmsg.scale;
                                                float _interval = ctrlmsg.interval;
                                                int _threshold = ctrlmsg.threshold;
                                                    
                                                <p>
                                                    @if (_isImage)
                                                    {
                                                        <span>On, </span>
                                                    }           
                                                    else
                                                    {
                                                        <span>Off, </span>
                                                    }               
                                                    @if (_isEvent)
                                                    {
                                                        <span>On, </span>
                                                    }           
                                                    else
                                                    {
                                                        <span>Off, </span>
                                                    }
                                                    @if (_isQuery)
                                                    {
                                                        <span>On, </span>
                                                    }
                                                    else
                                                    {
                                                        <span>Off, </span>
                                                    }                                                        
                                                    <span>@_scale, @_interval, @_threshold</span>
                                                </p>                 
                                            }
                                        }
                                        else
                                        {
                                            <h6>@rxLabel</h6>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
}
else
{
    <div class="container p-1" style="float: left;">
        @if (IsLoading)
        {        
                <div class="text-center">
                    <img src="/img/loading.gif">
                </div>        
        }
        else
        {
            <p>No records found.</p>
        }
    </div>
}
    



@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject]
    UserManager<IdentityUser> userManager { get; set; }

    private IEnumerable<Camera> Cameras { get; set; } = new List<Camera>();
    public bool IsLoading { get; set; }

    private int numOfCameras = 0;
    private List<MqttMsg> rxMqttMsgList = new List<MqttMsg>();
    private List<string> camIdList = new List<string>();
    private MqttMsg[] rxMqttMsgArray;    

    // Create a new MQTT client.
    private static MqttFactory factory = new MqttFactory();
    private static IMqttClient mqttClient = factory.CreateMqttClient();

    private List<string> messages0 = new List<string>();
    private List<string> messages1 = new List<string>();        

    private string servAddr = "hawkai.hknu.ac.kr";
    private int servPort = 8085;
    private string TOPIC_SUB = "hawkai/from";
    private string TOPIC_PUB = "hawkai/to";
    private string topicSubAll = "hawkai/from/ffffffff";
    private string topicPubAll = "hawkai/to/ffffffff";
    private string topicSubUser = string.Empty;    
    private string topicPubUser = string.Empty;
    private string messageInput = string.Empty;

    string userId = string.Empty;   
    string userEmail = string.Empty;

    private bool IsImage = false;
    private bool IsEvent = false;
    private bool IsQuery = true;

    public class SelectProperty
    {
        public int Id { get; set; }
        public string Key { get; set; }
        public string Value { get; set; }
    }
    //public List<SelectProperty> ScaleProp { get; set; }

    public List<SelectProperty> ScaleProp = new List<SelectProperty>()
    {
        new SelectProperty { Id = 1, Key = "Smallest", Value = "0.25"},
        new SelectProperty { Id = 2, Key = "Small", Value = "0.5"},
        new SelectProperty { Id = 3, Key = "Normal", Value = "1" },
        new SelectProperty { Id = 4, Key = "Large", Value = "2" },
        new SelectProperty { Id = 5, Key = "Largest", Value = "4" },
    };
    private string scaleValue = "1";
    public string SelectScale
    {
        get { return scaleValue; }
        set
        {
            scaleValue = value;
            ControlScale(scaleValue);
        }
    }

    public List<SelectProperty> IntervalProp = new List<SelectProperty>()
    {
        new SelectProperty { Id = 1, Key = "ASAP", Value = "0"},
        new SelectProperty { Id = 2, Key = "0.25 second", Value = "0.25"},
        new SelectProperty { Id = 3, Key = "0.5 second", Value = "0.5" },
        new SelectProperty { Id = 4, Key = "1 second", Value = "1" },
        new SelectProperty { Id = 5, Key = "2 second", Value = "2" },
    };
    private string intervalValue = "0.5";
    public string SelectInterval
    {
        get { return intervalValue; }
        set
        {
            intervalValue = value;
            ControlInterval(intervalValue);
        }
    }

    public List<SelectProperty> ThresholdProp = new List<SelectProperty>()
    {
        new SelectProperty { Id = 1, Key = "50", Value = "50"},
        new SelectProperty { Id = 2, Key = "100", Value = "100"},
        new SelectProperty { Id = 3, Key = "150", Value = "150" },
        new SelectProperty { Id = 4, Key = "200", Value = "200" }
    };
    private string thresholdValue = "50";
    public string SelectThreshold
    {
        get { return thresholdValue; }
        set
        {
            thresholdValue = value;
            ControlThreshold(thresholdValue);
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)      // 내용이 많은 경우에는 이렇게 처리하는 것이 좋음
    {
        if (firstRender)
        {
            var user = (await authenticationStateTask).User;
            var currentUser = await userManager.GetUserAsync(user);
            userId = currentUser.Id;
            userEmail = currentUser.Email;
            topicSubUser = TOPIC_SUB + "/" + userId;
            topicPubUser = TOPIC_PUB + "/" + userId;

            await Disconnect();
            await Subscribe();            
            await LoadCameras();            
            await SendPing();

            //Thread.Sleep(2000);
             
            //IsLoading = false;
            //StateHasChanged();      //OnAfterRenderAsync 사용할 때 StateHasChanged 있어야
        }        
    }

    private async Task LoadCameras()
    {
        IsLoading = true;
        StateHasChanged(); 
        Cameras = await CameraService.GetMyCameras(userEmail);

        Console.WriteLine("[hhchoi] number of cameras=" + Enumerable.Count<Camera>(Cameras));
        numOfCameras = Enumerable.Count<Camera>(Cameras);
        foreach(var objMsg in Cameras)
        {
            rxMqttMsgList.Add(new MqttMsg());
            camIdList.Add(objMsg.Name.ToString());                        
        }
        Console.WriteLine("[hhchoi] " + string.Join(",", camIdList));
        //Console.WriteLine("[hhchoi] rxMqttMsgList.Count" + rxMqttMsgList.Count);         
        rxMqttMsgArray = rxMqttMsgList.ToArray();      // list를 array로
        //Console.WriteLine("[hhchoi] rxMqttMsgArray.Length" + rxMqttMsgArray.Length);

        IsLoading = false;
        StateHasChanged();      //OnAfterRenderAsync 사용할 때 StateHasChanged 있어야
    }

    // 페이지 나갈때 MQTT close 해줘야!!
    private async Task Disconnect()
    {
        if (mqttClient is not null)
        {
            await mqttClient.DisconnectAsync();
            messages0.Add("MQTT Diconnection");
        }
    }

    private async Task Subscribe()
    {
        if (mqttClient is not null)
        {
            var clientId = Guid.NewGuid().ToString();       // 전역 고유 식별자
            messages0.Add($"clientId: {clientId}");

            // Use WebSocket connection.
            var options = new MqttClientOptionsBuilder()
                .WithClientId(clientId)     
                .WithTcpServer(servAddr, servPort)
                .WithCleanSession()
                .Build();

            await mqttClient.ConnectAsync(options, CancellationToken.None); // Since 3.0.5 with CancellationToken      

            // Subscribe to a topic 1
            await mqttClient.SubscribeAsync(new MqttTopicFilterBuilder().WithTopic(topicSubUser).Build());
            messages0.Add("MQTT Subscribed with topicSubUser");

            // Subscribe to a topic 2
            await mqttClient.SubscribeAsync(new MqttTopicFilterBuilder().WithTopic(topicSubAll).Build());
            messages0.Add("MQTT Subscribed with topicSubAll");


            mqttClient.DisconnectedAsync += async e =>
            {
                Console.WriteLine("MQTT Disconnected");
                await Task.CompletedTask;
            };

            // 메시지 수신시 실행 
            mqttClient.ApplicationMessageReceivedAsync += async e =>
            {
                // JSON 메시지 분석
                var jsonUtf8Bytes = e.ApplicationMessage.Payload;
                Console.WriteLine("[hhchoi] RxMqttMsg: " + e.ApplicationMessage.ConvertPayloadToString().Substring(0,110));

                if (jsonUtf8Bytes is not null)
                {                    
                    MqttMsg? mqttmsg = JsonSerializer.Deserialize<MqttMsg>(jsonUtf8Bytes);
                    if (mqttmsg is not null)
                    {
                        string? addr = mqttmsg.addr;
                        string? type = mqttmsg.type;
                        string? time = mqttmsg.time;
                        string? label = mqttmsg.label;
                        string? image = mqttmsg.image;

                        int camIdx = camIdList.IndexOf(addr);
                        //int camIdx = camIdList.IndexOf(addr?? "n/a");
                        //if (addr == "asdf")
                        //    camIdx = 7;

                        Console.WriteLine("[hhchoi] RxCam: " + addr + ", Index: " + camIdx);  

                        if (camIdx >= 0)
                        {
                            rxMqttMsgArray[camIdx].addr = addr;
                            rxMqttMsgArray[camIdx].type = type;
                            rxMqttMsgArray[camIdx].time = time;
                            rxMqttMsgArray[camIdx].label = label;
                            rxMqttMsgArray[camIdx].image = image;

                            //if (type == "event")
                            //{
                            //    messages1.Add($"Event : {label1} {time1}");
                            //}                                  
                        }
                    }
                }
                //await Task.CompletedTask;
                await InvokeAsync(StateHasChanged);
            };
        }
        else
        {
            messages0.Add("mqttClient is null !!!");
        }
    }

    private MqttApplicationMessage makeMqttMessage(string topic, string message)
    {
        var mqttMsg = new MqttApplicationMessageBuilder()
                .WithTopic(topic)
                .WithPayload(message)
                .WithQualityOfServiceLevel(MQTTnet.Protocol.MqttQualityOfServiceLevel.ExactlyOnce)
                .WithRetainFlag()
                .Build();
        return mqttMsg;
    }

    private async Task SendMessage(string message)
    {
        if (mqttClient is not null)
        {
            await mqttClient.PublishAsync(makeMqttMessage(topicPubUser, message), CancellationToken.None);
            await mqttClient.PublishAsync(makeMqttMessage(topicPubAll, message), CancellationToken.None);
            messages0.Add("Send " + message);
        }
    }

    private async Task ControlImage()
    {
        IsImage = !IsImage;
        await SendMessage("{ \"isImage\" : " + IsImage + " }");
    }
    private async Task ControlEvent()
    {
        IsEvent = !IsEvent;
        await SendMessage("{ \"isEvent\" : " + IsEvent + " }");
    }
    private async Task ControlQuery()
    {
        IsQuery = !IsQuery;
        await SendMessage("{ \"isQuery\" : " + IsQuery + " }");
    }
    private async Task ControlScale(string scaleValue)
    {
        await SendMessage("{ \"scale\" : " + scaleValue + " }");
    }
    private async Task ControlInterval(string intervalValue)
    {      
        await SendMessage("{ \"interval\" : " + intervalValue + " }");        
    }
    private async Task ControlThreshold(string thresholdValue)
    {
        await SendMessage("{ \"threshold\" : " + thresholdValue + " }");
    }

    private async Task SendPing()
    {
        await SendMessage("{ \"isPing\": true }");
    }

    private async Task SendDefaultParameter()
    {
        IsImage = false;
        IsEvent = false;
        IsQuery = true;
        scaleValue = "1";
        intervalValue = "0.5";
        thresholdValue = "50";

        var myData = new
        {            
            isImage = IsImage,
            isEvent = IsEvent,
            isQuery = IsQuery,
            scale = scaleValue,
            interval = intervalValue,
            threshold = thresholdValue
        };

        string jsonData = Newtonsoft.Json.JsonConvert.SerializeObject(myData);
        await SendMessage(jsonData);
    }
    
}