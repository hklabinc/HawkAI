@page "/camera"
@page "/camera/{id:int}"
@attribute [Authorize(Roles = "Admin,Normal")]
@inject ICameraService CameraService
@using Microsoft.AspNetCore.Identity

@if (Id == null)
{
    <h3>Create a new camera</h3>
}
else
{
    <h3>Edit "@camera.Name"</h3>
}

<EditForm Model="camera" OnSubmit="HandleSubmit">
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="camera.Name" class="form-control"></InputText>
    </div>
    @*<div>
        <label for="user">User</label>
        <InputText id="user" @bind-Value="camera.User" class="form-control"></InputText>
    </div>*@
    <div>
        <label for="location">Location</label>
        <InputText id="location" @bind-Value="camera.Location" class="form-control"></InputText>
    </div>
    <div>
        <label for="parameter">Parameter</label>
        <InputText id="parameter" @bind-Value="camera.Parameter" class="form-control"></InputText>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    @if (Id != null)
    {
        <button type="button" class="btn btn-danger" @onclick="DeleteCamera">Delete Camera</button>
    }
</EditForm>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject]
    UserManager<IdentityUser> userManager { get; set; }

    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;
    string userName = string.Empty;

    Camera camera = new Camera();

    protected override async void OnInitialized()
    {
        btnText = Id == null ? "Save New Camera" : "Update Camera";

        var user = (await authenticationStateTask).User;
        if (user.Identity.IsAuthenticated)
        {
            var currentUser = await userManager.GetUserAsync(user);
            string currentUserId = currentUser.Id;
            string currentUserEmail = currentUser.Email;
            //var currentUserPhone = currentUser.PhoneNumber;
            //var currentUserEmailConfirmed = currentUser.EmailConfirmed;

            userName = currentUserEmail;
        }
        else
        {
            // User is not logged in
        }
    }    

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            camera = await CameraService.GetSingleCamera((int)Id);
        }
    }


    async Task HandleSubmit()
    {
        camera.User = userName;
        if (Id == null)
        {            
            await CameraService.CreateCamera(camera);
        }
        else
        {
            await CameraService.UpdateCamera(camera, (int)Id);
        }
    }

    async Task DeleteCamera()
    {
        await CameraService.DeleteCamera(camera.Id);
    }
}